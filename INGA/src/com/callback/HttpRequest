package com.network;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.StringWriter;
import java.io.Writer;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicHeader;
import org.apache.http.protocol.HTTP;
import org.json.JSONObject;

import com.callback.ResponseCallback;

public class HttpRequest {

	private HttpPost httppost;
	private StringEntity strngEntty;
	private String response_data;
	private HttpResponse httpResponse;
	private JSONObject responseObject;
	private InputStream inputStream;
	private Writer writer;
	ResponseCallback callback;

	public JSONObject getJsonResponse(String resourse_path,
			JSONObject jsonRequest) {
		JSONObject jsonResponse = null;

		jsonResponse = callServiceRequest(resourse_path, jsonRequest);
		return jsonResponse;

	}

	// **************create a json request*********************
	private synchronized JSONObject callServiceRequest(String resourse_path,
			JSONObject jsonRequest) {
		HttpClient client = new DefaultHttpClient();
		try {
			httppost = new HttpPost(resourse_path);
			strngEntty = new StringEntity(jsonRequest.toString());
			strngEntty.setContentType(new BasicHeader(HTTP.CONTENT_TYPE,
					"application/json"));
			httppost.setEntity(strngEntty);
			httpResponse = client.execute(httppost);

			if (httpResponse != null) {

				inputStream = httpResponse.getEntity().getContent(); // Get the
																		// data
																		// in
																		// the
																		// entity
			}
			if (inputStream != null) {
				writer = new StringWriter();
				IOUtils.copy(inputStream, writer, "UTF-8");
				response_data = writer.toString();
				responseObject = new JSONObject(response_data);
				// callback.onTaaskCompleted(responseObject);
				return responseObject;
			}

		} catch (Exception e) {
			e.printStackTrace();
		} finally {

			httppost = null;
			strngEntty = null;
			response_data = null;
			responseObject = null;
			httpResponse = null;
			httppost = null;

			System.gc();

		}

		return null;
	}

	// ***************method for getResponse from Server***************
	public JSONObject getHttpPostResponse(String URL) {
		HttpClient httpclient = null;
		HttpPost httpPost = null;
		HttpResponse response = null;
		try {
			httpclient = new DefaultHttpClient();
			httpPost = new HttpPost(URL);
			response = httpclient.execute(httpPost);

			HttpEntity entity = response.getEntity();
			inputStream = entity.getContent();

			response_data = convertStreamToString(inputStream);
			responseObject = new JSONObject(response_data);
			return responseObject;

		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			httpclient = null;
			httpPost = null;
			response = null;
		}

		return null;
	}

	// *************method for convert input stream to string**************
	private static String convertStreamToString(InputStream is) {

		BufferedReader reader = new BufferedReader(new InputStreamReader(is));
		StringBuilder sb = new StringBuilder();

		String line = null;
		try {
			while ((line = reader.readLine()) != null) {
				sb.append(line + "\n");
			}
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				is.close();
				reader = null;
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		return sb.toString();
	}

	// // ***************method for error response***********************
	// private JSONObject errorResponse(String erroCode, String errorDesc) {
	// JSONObject JsonObject = new JSONObject();
	// try {
	// JsonObject.put("status", false);
	// JsonObject.put("errorDesc", errorDesc);
	// JsonObject.put("errorCode", erroCode);
	// JsonObject.put("result", "");
	// } catch (JSONException e) {
	// }
	//
	// return JsonObject;
	// }

}
