package com.fragments;

import java.util.HashMap;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Activity;
import android.app.Fragment;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;

import com.callback.ResponseCallback;
import com.chetu.retailerapp.CreditLimitActivity;
import com.chetu.retailerapp.R;
import com.chetu.retailerapp.ScannerActivity;
import com.common.AppConstant;
import com.common.AppUrl;
import com.common.Utilities;
import com.network.LoginAsyncTask;

public class ScannerFragment extends Fragment {
	private Context context;
	private View view;
	String contents = null;
	private String url1 = null, balance = null, u_id = null;
	private AppUrl appUrl;
	private Utilities utilities;
	private HashMap<String, String> permotion_hash_value;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		view = inflater.inflate(R.layout.dummy_layout, null);
		return view;
	}

	@Override
	public void onAttach(Activity activity) {
		super.onAttach(activity);
		this.context = activity;
		appUrl = new AppUrl(context);
	}

	@Override
	public void onActivityCreated(Bundle bundle) {
		super.onActivityCreated(bundle);

		findId();
		scannerMethod();
	}

	private void findId() {
		utilities = new Utilities(context);
		u_id = utilities.getId();
	}

	@Override
	public void onStart() {
		super.onStart();

	}

	/**
	 * @user: Manpreet Singh
	 * @date March 24, 2015
	 * @return void
	 * @exception
	 * @description Method for start qr code scanner by calling third party
	 *              library class
	 */
	public void scannerMethod() {
		Intent intent = new Intent("" + "com.google.zxing.client.android.SCAN");
		intent.putExtra("SCAN_MODE", "QR_CODE_MODE");
		startActivityForResult(intent, 0);
	}

	@Override
	public void onActivityResult(int requestCode, int resultCode, Intent intent) {
		super.onActivityResult(requestCode, resultCode, intent);
		if (requestCode == 0) {
			if (resultCode == Activity.RESULT_CANCELED) {
				getActivity().finish();
			} else if (resultCode == Activity.RESULT_OK) {
				if (null != intent) {
					contents = intent.getStringExtra("SCAN_RESULT");

					if (null != contents) {
						boolean flag = utilities.isJSONValid(contents);
						JSONObject jsonObject = null;
						if (flag) {

							if (contents
									.contains(AppConstant.qr_verify_parameter_store_id)) {
								if (Utilities.isConnectedToInternet(context)) {
									try {
										jsonObject = new JSONObject(contents);
										if (contents.contains("[")) {
											if (AppConstant.permotion_array
													.size() != 0) {
												AppConstant.permotion_array
														.clear();
											}
											JSONArray array = jsonObject
													.getJSONArray("promotionIdList");
											for (int i = 0; i < array.length(); i++) {
												String permotion_id = array
														.getString(i);
												permotion_hash_value = new HashMap<>();
												permotion_hash_value
														.put(AppConstant.permotion_id,
																permotion_id);
												AppConstant.permotion_array
														.add(permotion_hash_value);
											}

										}
										jsonObject
												.put(AppConstant.qr_verify_parameter_owner_id,
														utilities.getId());

									} catch (Exception e) {
										e.printStackTrace();
									}
									postRequest(jsonObject);
								}

							} else {

								Utilities.showDialog1(getActivity(), context,
										AppConstant.qr_code_exception_msg,
										AppConstant.qr_code_exception_title,
										ScannerActivity.class, true, true);

							}

						} else {
							Utilities.showDialog1(getActivity(), context,
									AppConstant.qr_code_exception_msg,
									AppConstant.qr_code_exception_title,
									ScannerActivity.class, true, true);
						}

					}
				}
			} else if (resultCode == Activity.RESULT_FIRST_USER) {
				clearActivity();
			}

		}

		{

		}
	}

	private void clearActivity() {
		utilities.clearPrefrence(getActivity(), true);

	}

	// *****************method for post qr information to
	// server******************
	private void postRequest(JSONObject jsonObject) {
		String customerId = null, ownerId = null, storeId = null;
		try {
			customerId = jsonObject
					.getString(AppConstant.qr_verify_parameter_customer_id);
			storeId = jsonObject
					.getString(AppConstant.qr_verify_parameter_store_id);
			utilities.saveStorePref(customerId, storeId);
		} catch (Exception e) {
			e.printStackTrace();
		}
		url1 = appUrl.getUrl() + AppConstant.qr_verify_url;
		try {
			JSONObject loginRequest = new JSONObject();
			loginRequest.put(AppConstant.qr_verify_parameter_customer_id,
					customerId);
			loginRequest.put(AppConstant.qr_verify_parameter_owner_id, u_id);
			loginRequest.put(AppConstant.qr_verify_parameter_store_id, storeId);

			new LoginAsyncTask(new ResponseCallback() {

				@Override
				public void onTaaskCompleted(JSONObject object) {

					try {
						balance = object.getString(AppConstant.credit_balance_tag);
					} catch (Exception e) {
						e.printStackTrace();
					}

					Utilities.setIntentData(getActivity(),
							CreditLimitActivity.class, false, balance);

				}
			}, context, url1, loginRequest).execute();
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	protected void getResponse(JSONObject object) {

	}
}
